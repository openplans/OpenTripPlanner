/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.opentripplanner.api.thrift.definition;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GraphVerticesResponse implements org.apache.thrift.TBase<GraphVerticesResponse, GraphVerticesResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GraphVerticesResponse");

  private static final org.apache.thrift.protocol.TField VERTICES_FIELD_DESC = new org.apache.thrift.protocol.TField("vertices", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GraphVerticesResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GraphVerticesResponseTupleSchemeFactory());
  }

  private List<org.opentripplanner.api.thrift.definition.GraphVertex> vertices; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERTICES((short)1, "vertices");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERTICES
          return VERTICES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERTICES, new org.apache.thrift.meta_data.FieldMetaData("vertices", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "GraphVertex"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GraphVerticesResponse.class, metaDataMap);
  }

  public GraphVerticesResponse() {
  }

  public GraphVerticesResponse(
    List<org.opentripplanner.api.thrift.definition.GraphVertex> vertices)
  {
    this();
    this.vertices = vertices;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GraphVerticesResponse(GraphVerticesResponse other) {
    if (other.isSetVertices()) {
      List<org.opentripplanner.api.thrift.definition.GraphVertex> __this__vertices = new ArrayList<org.opentripplanner.api.thrift.definition.GraphVertex>();
      for (org.opentripplanner.api.thrift.definition.GraphVertex other_element : other.vertices) {
        __this__vertices.add(other_element);
      }
      this.vertices = __this__vertices;
    }
  }

  public GraphVerticesResponse deepCopy() {
    return new GraphVerticesResponse(this);
  }

  @Override
  public void clear() {
    this.vertices = null;
  }

  public int getVerticesSize() {
    return (this.vertices == null) ? 0 : this.vertices.size();
  }

  public java.util.Iterator<org.opentripplanner.api.thrift.definition.GraphVertex> getVerticesIterator() {
    return (this.vertices == null) ? null : this.vertices.iterator();
  }

  public void addToVertices(org.opentripplanner.api.thrift.definition.GraphVertex elem) {
    if (this.vertices == null) {
      this.vertices = new ArrayList<org.opentripplanner.api.thrift.definition.GraphVertex>();
    }
    this.vertices.add(elem);
  }

  public List<org.opentripplanner.api.thrift.definition.GraphVertex> getVertices() {
    return this.vertices;
  }

  public void setVertices(List<org.opentripplanner.api.thrift.definition.GraphVertex> vertices) {
    this.vertices = vertices;
  }

  public void unsetVertices() {
    this.vertices = null;
  }

  /** Returns true if field vertices is set (has been assigned a value) and false otherwise */
  public boolean isSetVertices() {
    return this.vertices != null;
  }

  public void setVerticesIsSet(boolean value) {
    if (!value) {
      this.vertices = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERTICES:
      if (value == null) {
        unsetVertices();
      } else {
        setVertices((List<org.opentripplanner.api.thrift.definition.GraphVertex>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERTICES:
      return getVertices();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERTICES:
      return isSetVertices();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GraphVerticesResponse)
      return this.equals((GraphVerticesResponse)that);
    return false;
  }

  public boolean equals(GraphVerticesResponse that) {
    if (that == null)
      return false;

    boolean this_present_vertices = true && this.isSetVertices();
    boolean that_present_vertices = true && that.isSetVertices();
    if (this_present_vertices || that_present_vertices) {
      if (!(this_present_vertices && that_present_vertices))
        return false;
      if (!this.vertices.equals(that.vertices))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GraphVerticesResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GraphVerticesResponse typedOther = (GraphVerticesResponse)other;

    lastComparison = Boolean.valueOf(isSetVertices()).compareTo(typedOther.isSetVertices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVertices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertices, typedOther.vertices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GraphVerticesResponse(");
    boolean first = true;

    sb.append("vertices:");
    if (this.vertices == null) {
      sb.append("null");
    } else {
      sb.append(this.vertices);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetVertices()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'vertices' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GraphVerticesResponseStandardSchemeFactory implements SchemeFactory {
    public GraphVerticesResponseStandardScheme getScheme() {
      return new GraphVerticesResponseStandardScheme();
    }
  }

  private static class GraphVerticesResponseStandardScheme extends StandardScheme<GraphVerticesResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GraphVerticesResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERTICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.vertices = new ArrayList<org.opentripplanner.api.thrift.definition.GraphVertex>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  org.opentripplanner.api.thrift.definition.GraphVertex _elem26; // required
                  _elem26 = new org.opentripplanner.api.thrift.definition.GraphVertex();
                  _elem26.read(iprot);
                  struct.vertices.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setVerticesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GraphVerticesResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.vertices != null) {
        oprot.writeFieldBegin(VERTICES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.vertices.size()));
          for (org.opentripplanner.api.thrift.definition.GraphVertex _iter27 : struct.vertices)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GraphVerticesResponseTupleSchemeFactory implements SchemeFactory {
    public GraphVerticesResponseTupleScheme getScheme() {
      return new GraphVerticesResponseTupleScheme();
    }
  }

  private static class GraphVerticesResponseTupleScheme extends TupleScheme<GraphVerticesResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GraphVerticesResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.vertices.size());
        for (org.opentripplanner.api.thrift.definition.GraphVertex _iter28 : struct.vertices)
        {
          _iter28.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GraphVerticesResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.vertices = new ArrayList<org.opentripplanner.api.thrift.definition.GraphVertex>(_list29.size);
        for (int _i30 = 0; _i30 < _list29.size; ++_i30)
        {
          org.opentripplanner.api.thrift.definition.GraphVertex _elem31; // required
          _elem31 = new org.opentripplanner.api.thrift.definition.GraphVertex();
          _elem31.read(iprot);
          struct.vertices.add(_elem31);
        }
      }
      struct.setVerticesIsSet(true);
    }
  }

}

